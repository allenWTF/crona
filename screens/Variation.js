import React, {Component} from 'react';
import {
    SafeAreaView, ScrollView, StyleSheet, Text, View
} from 'react-native';
import {Colors} from "react-native/Libraries/NewAppScreen";
import Title from "../components/Title/Title";
import LineChart from "react-native-responsive-linechart";
import {Picker} from '@react-native-community/picker';
import ResultTable from "../components/ResultTable/ResultTable"
import Button from "../components/Button/Button";
import ModalWindow from "../components/ModalWindow/ModalWindow";

class Variation extends Component {

    static navigationOptions = ({screenProps}) => {
        return {
            title: '–í–∞—Ä–∏–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
        };
    };

    constructor(props) {
        super(props);

        this.business = props.navigation.getParam("Business", [0]);
        this.results = [
            {
                title: "üîª –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –≤ –≥–æ–¥ –Ω–∞ " +
                    Math.abs((100 - this.business.variationChanges.find(item => item.value === "NumberOfServicesSoldPerYear").amount * 100)) + "%",
                param: "NumberOfServicesSoldPerYear",
                data: this.business.UpdateWithVariation("NumberOfServicesSoldPerYear")
            },
            {
                title: "üîª –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –Ω–∞ " +
                    Math.abs((100 - this.business.variationChanges.find(item => item.value === "UnitSalesPrice").amount * 100)) + "%",
                param: "UnitSalesPrice",
                data: this.business.UpdateWithVariation("UnitSalesPrice")
            },
            {
                title: "üî∫ –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –Ω–∞ " +
                    Math.abs((100 - this.business.variationChanges.find(item => item.value === "UnitPrice").amount * 100)) + "%",
                param: "UnitPrice",
                data: this.business.UpdateWithVariation("UnitPrice")
            },
            {
                title: "üîª –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –¥–µ–±. –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ " +
                    Math.abs((100 - this.business.variationChanges.find(item => item.value === "Receivables").amount * 100)) + "%",
                param: "Receivables",
                data: this.business.UpdateWithVariation("Receivables")
            },
            {
                title: "üî∫ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞ –Ω–∞ " +
                    Math.abs((100 - this.business.variationChanges.find(item => item.value === "LoanCost").amount * 100)) + "%",
                param: "LoanCost",
                data: this.business.UpdateWithVariation("LoanCost")
            }
        ];
        this.resultPickers = (() => {
            let obj = [];
            this.results.forEach(item => {
                obj.push(<Picker.Item label={item.title} value={item.title} key={item.title}/>);
            });
            return obj;
        })();

        this.state = {
            currentParam: this.results[0].title,
            modal: {
                isON: false,
                window: null
            }
        };

        this.GoToEllasticMatrix = this.GoToEllasticMatrix.bind(this);
    }

    GoToEllasticMatrix(force) {
        let badReasons = this.CheckProject();

        if (badReasons.length > 0 && force === false) {
            this.setState({
                modal: {
                    ...this.state.modal,
                    window: <ModalWindow header={"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ—É—Å—Ç–æ–π—á–∏–≤"}
                                         description={"–í–∞—à –∏–Ω–≤–µ—Å—Ç–µ—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ—É—Å—Ç–æ–π—á–∏–≤ –∫ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"}
                                         data={badReasons}
                                         buttons={[<Button title={"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}
                                                           key={Math.random() * 100000} onPress={() => {
                                             this.props.navigation.navigate("Home")
                                         }}></Button>,
                                             <Button title={"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"}
                                                     key={Math.random() * 100000} onPress={() => {
                                                 this.setState({modal: {...this.state.modal, isON: false}})
                                             }}></Button>,
                                             <Button key={Math.random() * 100000} title={"–í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"}
                                                     bgColor={"grey"} onPress={() => {
                                                 this.GoToEllasticMatrix(true)
                                             }}></Button>]}/>,
                    isON: true
                }
            });
        } else {
            this.setState({
                modal: {
                    ...this.state.modal,
                    isON: false
                }
            }, () => {
                this.props.navigation.navigate("Elasticity", {Business: this.business, VariationResults: this.results})
            })
        }
    }

    CheckProject() {
        let reasons = [];

        this.results.forEach(item => {
            if (item.data.CurrentNPV[item.data.CurrentNPV.length - 1] < 0) {
                reasons.push("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —á–∏—Å—Ç–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ \n" + item.title)
            }
            if (item.data.CashBalance.some(cashBalanceItem => cashBalanceItem < 0)) {
                reasons.push("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ \n" + item.title)
            }
        });

        if (reasons.length > 0) {
            reasons.forEach((item) => {
                reasons.push({key: item});
            });
            reasons.splice(0, reasons.length / 2);
        }

        return reasons;
    }

    render() {

        const currentResult = this.results.find(item => item.title === this.state.currentParam);

        let gridStep = 100;
        if (currentResult.data.CurrentNPV[1]) {
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 1000) {
                gridStep = 10000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 10000) {
                gridStep = 50000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 50000) {
                gridStep = 100000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 100000) {
                gridStep = 500000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 500000) {
                gridStep = 1000000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 1000000) {
                gridStep = 10000000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 10000000) {
                gridStep = 100000000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 100000000) {
                gridStep = 1000000000;
            }
            if (Math.abs(currentResult.data.CurrentNPV[2] - currentResult.data.CurrentNPV[1]) > 1000000000) {
                gridStep = 10000000000;
            }
        }

        const config = {
            line: {
                visible: true,
                strokeWidth: 2,
                strokeColor: '#ffa726',
            },
            area: {
                visible: true,
                gradientFrom: '#ffa726',
                gradientFromOpacity: 0.35,
                gradientTo: '#ffa726',
                gradientToOpacity: 0,
            },
            tooltip: {
                visible: true,
                labelFontSize: 15,
            },
            yAxis: {
                visible: true,
                labelFormatter: v => Math.round(v / 1000) + 'K',
            },
            xAxis: {
                visible: true,
                labelFontSize: 12,
                labelColor: '#777',
            },
            grid: {
                stepSize: gridStep,
            },
            dataPoint: {
                visible: true,
                color: '#ff6312',
                radius: 4,
            },
            insetX: 16,
            insetY: 8,
        };

        return (
            <SafeAreaView>
                <ScrollView
                    contentInsetAdjustmentBehavior="automatic"
                    contentContainerStyle={styles.contentContainer}
                    ref={ref => this.scrollView = ref}
                    onContentSizeChange={() => this.scrollView.scrollToEnd({animated: true})}
                    style={styles.scrollView}>
                    <View style={{paddingBottom: 10, paddingTop: 10}}>
                        <Title>–ú–µ—Ç–æ–¥ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</Title>
                    </View>
                    <Text maxFontSizeMultiplier={1} style={styles.commonText}>
                        –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –í–∞—à–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–µ—Ü–∏–æ–Ω–Ω–æ–≥–æ
                        –ø—Ä–æ–µ–∫—Ç–∞. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å, –∫–∞–∫
                        –∏–∑–º–µ–Ω—è—é—Ç—Å—è –¥–≤–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (—á–∏—Å—Ç–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö
                        —Å—Ä–µ–¥—Å—Ç–≤) –ø—Ä–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                        –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
                    </Text>
                    <Picker style={styles.picker} mode={"dropdown"} selectedValue={this.state.currentParam}
                            onValueChange={(itemValue, itemIndex) => this.setState({currentParam: itemValue})}>
                        {this.resultPickers}
                    </Picker>
                    <View style={{marginTop: 20}}>
                        <Title>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–µ–∫—Ç–∞</Title>
                        <View style={{height: 240}}>
                            <LineChart style={{flex: 1}} xLabels={[0, 1, 2, 3, 4, 5, 6]} config={config}
                                       data={currentResult.data.CurrentNPV}/>
                        </View>
                        <ResultTable data={currentResult.data.CurrentNPV}/>
                    </View>
                    <View style={{marginTop: 20}}>
                        <Title>–î–∏–Ω–∞–º–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</Title>
                        <View style={{height: 240}}>
                            <LineChart style={{flex: 1}} xLabels={[0, 1, 2, 3, 4, 5, 6]} config={config}
                                       data={currentResult.data.CashBalance}/>
                        </View>
                        <ResultTable data={currentResult.data.CashBalance}/>
                    </View>
                    <Button title={"–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º —ç–ª–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏"} onPress={() => {
                        this.GoToEllasticMatrix(false)
                    }}></Button>
                    <View style={styles.centeredView}>{this.state.modal.isON && this.state.modal.window}</View>
                </ScrollView>
            </SafeAreaView>
        );
    }
}

const styles = StyleSheet.create({
    scrollView: {
        backgroundColor: Colors.white,
    },
    contentContainer: {
        paddingBottom: 20,
    },
    commonText: {
        fontSize: 16,
        color: '#000000',
        paddingTop: 0,
        marginTop: 0,
        paddingLeft: 16,
        paddingRight: 16,
    },
    picker: {
        marginTop: 10,
        marginHorizontal: 6
    },
    centeredView: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: 'rgba(0, 0, 0, 0.5)'
    }
});

export default Variation